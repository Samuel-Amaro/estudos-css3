*{
    box-sizing: border-box;
}
:root{
    --cor_01: #333;
    --cor_02: #ddd;
    --cor_03: #f1f1f1;
}

body{
    font-family: Arial, Helvetica, sans-serif;
    margin: 0;
}

div.nota{
    background-color: yellow;
    padding-top: 5px;
    padding-right: 5px;
    padding-bottom: 5px;
    padding-left: 5px;
    text-align: center;
}

header{
    background-image: url("../imagens/logo.jpg");
    background-position: center;
    background-repeat: no-repeat;
    background-size: 100%;
    text-align: center;
    color: white;
    padding-top: 60px;
    padding-right: 60px;
    padding-bottom: 60px;
    padding-left: 60px;
}

nav.navbar{
    display: flex;
    background-color: var(--cor_01);
}

nav.navbar a{
    color: white;
    padding-top: 14px;
    padding-right: 20px;
    padding-bottom: 14px;
    padding-left: 20px;
    text-decoration: none;
    text-align: center;
}

nav.navbar a:hover{
    background-color: var(--cor_02);
    color: black;
}

/*container coluna*/
section.linha{
    /*A display propriedade especifica o comportamento de exibição (o tipo de caixa de renderização) de um elemento.
    Flex: Exibe um elemento como um flex container em nível de bloco
    */
    display: flex;
    /*Especifica se os itens flexíveis devem ser agrupados ou não, se não houver espaço suficiente para eles em uma linha flexível; wrap(enrolar): Especifica que os itens flexíveis serão embalados se necessário. isso e necessario quando o layout se quebra ou quando a um overflow ao redimensionar o conteudo*/
    flex-wrap: wrap;
}

/*Crie duas colunas desiguais que fiquem lado a lado
Sidebar/left column
*/
aside.side{
    /*shorthand para as propriedades flex-grow, flex-shrink, flex-basis, aqui neste exemplo assume so um valor na sintaxe, este valor e o valor de comprimento inicial informado e interpretado por flex-basis, o flex-grow: assume o valor padrão 1 que diz para não crescer proporcionalmente em relação aos outros todos vão ficar com a mesmo proporção e comprimento, e o flex-shrink: assume o valor 0, sendo especificado para não diminuir, quando o flex basis aumentar ou diminuir*/
    flex: 30%;
    background-color: var(--cor_03);
    padding-top: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    padding-left: 20px;
}

div.conteiner-img-perfil img{
    padding-top: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    padding-left: 20px;
    width: 100%;
}

div.conteiner-img-fatos img{
    width: 100%;
    padding-top: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    padding-left: 20px;
}

div.conteiner-img img{
    width: 100%;
    padding-top: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    padding-left: 20px;
}

/*Main column*/
article.conteudo-principal{
    /*shorthand para as propriedades flex-grow, flex-shrink, flex-basis, aqui neste exemplo assume so um valor na sintaxe, este valor e o valor de comprimento inicial informado e interpretado por flex-basis, o flex-grow: assume o valor padrão 1 que diz para não crescer proporcionalmente em relação aos outros todos vão ficar com a mesmo proporção e comprimento, e o flex-shrink: assume o valor 0, sendo especificado para não diminuir, quando o flex basis aumentar ou diminuir*/
    flex: 70%;
    background-color: white;
    padding-top: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    padding-left: 20px;
}

footer{
    padding-top: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    padding-left: 20px;
    text-align: center;
    background-color: var(--cor_02);
}

/*Layout responsivo - quando a tela tem menos de 700 px de largura, empilhe as duas colunas uma em cima da outra, em vez de uma ao lado da outra*/
@media screen and (max-width: 700px) {
    section.linha, nav.navbar{
        flex-direction: column;
    }
}